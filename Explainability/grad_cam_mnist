{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"grad_cam_mnist","provenance":[{"file_id":"1_lq6k6Qn_wk55Ws4yX-P2Gi9e4nDdv0d","timestamp":1637766386829},{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/grad_cam.ipynb","timestamp":1637763489600}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Aw7dy9c9X9T8"},"source":["# Grad-CAM class activation visualization\n","\n","**Adapted from:** [fchollet](https://twitter.com/fchollet)<br>"]},{"cell_type":"markdown","metadata":{"id":"18fSfv6yX9UB"},"source":["Adapted from Deep Learning with Python (2017).\n","## Setup"]},{"cell_type":"code","metadata":{"id":"IM7Fw1xQX9UD","executionInfo":{"status":"ok","timestamp":1637772297437,"user_tz":-60,"elapsed":169,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}}},"source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","# Display\n","from IPython.display import Image, display\n","import matplotlib.pyplot as plt\n","import matplotlib.cm as cm\n"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"wBWXcbi78Eyl"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fo58JT-LlZQM"},"source":["Train 2 conv layer for MNIST prediction"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Ww8bkMF2lBEU","executionInfo":{"status":"ok","timestamp":1637771333329,"user_tz":-60,"elapsed":213148,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}},"outputId":"8186696b-5798-4c09-ca30-641c9edf1c4d"},"source":["from __future__ import print_function\n","\n","#The two folloing lines allow to reduce tensorflow verbosity\n","import os\n","os.environ['TF_CPP_MIN_LOG_LEVEL']='1' # '0' for DEBUG=all [default], '1' to filter INFO msgs, '2' to filter WARNING msgs, '3' to filter all msgs\n","\n","import tensorflow as tf\n","import tensorflow.keras as keras\n","from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten\n","from tensorflow.keras.optimizers import RMSprop, Adam, SGD\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","\n","print('tensorflow:', tf.__version__)\n","print('keras:', tf.keras.__version__)\n","\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","\n","\n","print('x_train.shape=', x_train.shape)\n","print('y_test.shape=', y_test.shape)\n","\n","#To input our values in our network Conv2D layer, we need to reshape the datasets, i.e.,\n","# pass from (60000, 28, 28) to (60000, 28, 28, 1) where 1 is the number of channels of our images\n","img_rows, img_cols = x_train.shape[1], x_train.shape[2]\n","x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n","x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n","\n","#Convert to float\n","x_train = x_train.astype('float32')\n","x_test = x_test.astype('float32')\n","\n","#Normalize inputs from [0; 255] to [0; 1]\n","x_train = x_train / 255\n","x_test = x_test / 255\n","\n","print('x_train.shape=', x_train.shape)\n","print('x_test.shape=', x_test.shape)\n","\n","num_classes = 10\n","\n","#Convert class vectors to binary class matrices (\"one hot encoding\")\n","## Doc : https://keras.io/utils/#to_categorical\n","y_train = tf.keras.utils.to_categorical(y_train, num_classes)\n","y_test = tf.keras.utils.to_categorical(y_test, num_classes)\n","# num_classes is computed automatically here\n","# but it is dangerous if y_test has not all the classes\n","# It would be better to pass num_classes=np.max(y_train)+1\n","\n","\n","\n","#Let start our work: creating a convolutional neural network\n","\n","#####TO COMPLETE\n","model = keras.Sequential([\n","    keras.layers.Conv2D(16,3,1, activation='relu'),\n","    keras.layers.MaxPooling2D(2),\n","    keras.layers.Dropout(0.1),\n","    keras.layers.Conv2D(16,3, 1, activation='relu'),\n","    keras.layers.MaxPooling2D(2),\n","    keras.layers.Dropout(0.1),\n","    keras.layers.Flatten(),\n","    keras.layers.Dense(16, activation='relu'),\n","    keras.layers.Dense(10, activation='softmax')\n","])\n","\n","model.compile(optimizer='Adam',\n","                loss='categorical_crossentropy',\n","                metrics='accuracy')\n","\n","hist = model.fit(x_train, y_train, epochs=20, batch_size=32, validation_split = 0.2)\n","\n","plt.plot(hist.history['loss'])\n","plt.plot(hist.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'val'], loc='upper left')\n","plt.show()\n","\n","test_loss, test_acc = model.evaluate(x_test,  y_test, verbose=2)\n","\n","print('\\nTest accuracy:', test_acc)\n","print('\\nTest loss:', test_loss)\n","\n","\n","##Displaying the worst 10 results. \n","predictions=model.predict(x_test)\n","prediction_classes=np.argmax(predictions,axis=1)\n","real_classes = np.argmax(y_test,axis=1)\n","\n","wrong_classifications = np.nonzero(prediction_classes != real_classes)[0]\n","max_logits = np.max(predictions[wrong_classifications], axis=1) \n","worst_index = wrong_classifications[np.argsort(max_logits)[-10:]]"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["tensorflow: 2.7.0\n","keras: 2.7.0\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","11501568/11490434 [==============================] - 0s 0us/step\n","x_train.shape= (60000, 28, 28)\n","y_test.shape= (10000,)\n","x_train.shape= (60000, 28, 28, 1)\n","x_test.shape= (10000, 28, 28, 1)\n","Epoch 1/20\n","1500/1500 [==============================] - 22s 6ms/step - loss: 0.3556 - accuracy: 0.8922 - val_loss: 0.1260 - val_accuracy: 0.9653\n","Epoch 2/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.1261 - accuracy: 0.9619 - val_loss: 0.0872 - val_accuracy: 0.9759\n","Epoch 3/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0914 - accuracy: 0.9715 - val_loss: 0.0762 - val_accuracy: 0.9783\n","Epoch 4/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0739 - accuracy: 0.9776 - val_loss: 0.0588 - val_accuracy: 0.9837\n","Epoch 5/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0640 - accuracy: 0.9805 - val_loss: 0.0522 - val_accuracy: 0.9847\n","Epoch 6/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0575 - accuracy: 0.9818 - val_loss: 0.0527 - val_accuracy: 0.9842\n","Epoch 7/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0508 - accuracy: 0.9840 - val_loss: 0.0473 - val_accuracy: 0.9869\n","Epoch 8/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0490 - accuracy: 0.9844 - val_loss: 0.0465 - val_accuracy: 0.9864\n","Epoch 9/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0447 - accuracy: 0.9854 - val_loss: 0.0484 - val_accuracy: 0.9868\n","Epoch 10/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0422 - accuracy: 0.9863 - val_loss: 0.0453 - val_accuracy: 0.9869\n","Epoch 11/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0385 - accuracy: 0.9880 - val_loss: 0.0441 - val_accuracy: 0.9876\n","Epoch 12/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0387 - accuracy: 0.9879 - val_loss: 0.0444 - val_accuracy: 0.9875\n","Epoch 13/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0349 - accuracy: 0.9889 - val_loss: 0.0413 - val_accuracy: 0.9890\n","Epoch 14/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0344 - accuracy: 0.9885 - val_loss: 0.0420 - val_accuracy: 0.9883\n","Epoch 15/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0322 - accuracy: 0.9895 - val_loss: 0.0387 - val_accuracy: 0.9887\n","Epoch 16/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0343 - accuracy: 0.9884 - val_loss: 0.0403 - val_accuracy: 0.9891\n","Epoch 17/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0295 - accuracy: 0.9902 - val_loss: 0.0407 - val_accuracy: 0.9894\n","Epoch 18/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0313 - accuracy: 0.9893 - val_loss: 0.0368 - val_accuracy: 0.9900\n","Epoch 19/20\n","1500/1500 [==============================] - 8s 6ms/step - loss: 0.0279 - accuracy: 0.9910 - val_loss: 0.0391 - val_accuracy: 0.9895\n","Epoch 20/20\n","1500/1500 [==============================] - 9s 6ms/step - loss: 0.0260 - accuracy: 0.9909 - val_loss: 0.0381 - val_accuracy: 0.9908\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["313/313 - 1s - loss: 0.0330 - accuracy: 0.9889 - 1s/epoch - 4ms/step\n","\n","Test accuracy: 0.9889000058174133\n","\n","Test loss: 0.032977145165205\n"]}]},{"cell_type":"markdown","metadata":{"id":"Kfpbh7ikX9UF"},"source":["## Configurable parameters\n","\n","You can change these to another model.\n","\n","To get the values for `last_conv_layer_name` use `model.summary()`\n","to see the names of all layers in the model."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GKNFNCm2afjT","executionInfo":{"status":"ok","timestamp":1637771452244,"user_tz":-60,"elapsed":231,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}},"outputId":"f6d258c1-d6dc-4d6f-d56b-1c4df926e2be"},"source":["model.summary()"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 16)        160       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 16)       0         \n"," )                                                               \n","                                                                 \n"," dropout (Dropout)           (None, 13, 13, 16)        0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 16)        2320      \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 16)         0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_1 (Dropout)         (None, 5, 5, 16)          0         \n","                                                                 \n"," flatten (Flatten)           (None, 400)               0         \n","                                                                 \n"," dense (Dense)               (None, 16)                6416      \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                170       \n","                                                                 \n","=================================================================\n","Total params: 9,066\n","Trainable params: 9,066\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"QIuNWkyrmmun","executionInfo":{"status":"ok","timestamp":1637771460932,"user_tz":-60,"elapsed":205,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}}},"source":["# The dimensions of our input image\n","img_width = 28\n","img_height = 28\n","img_type = \"gray\" #rgb or gray\n","last_conv_layer_name = \"conv2d_1\""],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bk5v9K5WX9UG"},"source":["## The Grad-CAM algorithm"]},{"cell_type":"code","metadata":{"id":"WN-4EnutX9UH","executionInfo":{"status":"ok","timestamp":1637771492432,"user_tz":-60,"elapsed":258,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}}},"source":["\n","def get_img_array(img_path, size):\n","    # `img` is a PIL image of size 299x299\n","    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n","    # `array` is a float32 Numpy array of shape (299, 299, 3)\n","    array = keras.preprocessing.image.img_to_array(img)\n","    array = np.expand_dims(array, axis=0)\n","    return array\n","\n","\n","def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n","    # First, we create a model that maps the input image to the activations\n","    # of the last conv layer as well as the output predictions\n","    grad_model = tf.keras.models.Model(\n","        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n","    )\n","\n","    # Then, we compute the gradient of the top predicted class for our input image\n","    # with respect to the activations of the last conv layer\n","    with tf.GradientTape() as tape:\n","        last_conv_layer_output, preds = grad_model(img_array)\n","        if pred_index is None:\n","            pred_index = tf.argmax(preds[0])\n","        class_channel = preds[:, pred_index]\n","\n","    # This is the gradient of the output neuron (top predicted or chosen)\n","    # with regard to the output feature map of the last conv layer\n","    grads = tape.gradient(class_channel, last_conv_layer_output)\n","\n","    # This is a vector where each entry is the mean intensity of the gradient\n","    # over a specific feature map channel\n","    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n","\n","    # We multiply each channel in the feature map array\n","    # by \"how important this channel is\" with regard to the top predicted class\n","    # then sum all the channels to obtain the heatmap class activation\n","    last_conv_layer_output = last_conv_layer_output[0]\n","    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n","    heatmap = tf.squeeze(heatmap)\n","\n","    # For visualization purpose, we will also normalize the heatmap between 0 & 1\n","    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)\n","    return heatmap.numpy()\n"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i4O4xnbEX9UI"},"source":["## Let's test-drive it"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":284},"id":"oGER9oHdn64l","executionInfo":{"status":"ok","timestamp":1637771500578,"user_tz":-60,"elapsed":632,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}},"outputId":"1771ab63-2075-4f0e-9201-b09c231eb5cb"},"source":["plt.imshow( np.squeeze(x_test[0]) )"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f7d3319b490>"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EuGHqxVwrB-e","executionInfo":{"status":"ok","timestamp":1637771504267,"user_tz":-60,"elapsed":203,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}},"outputId":"f70f8302-dee9-46f8-d433-9de7802cbbfd"},"source":["model.summary()"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 16)        160       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 16)       0         \n"," )                                                               \n","                                                                 \n"," dropout (Dropout)           (None, 13, 13, 16)        0         \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 16)        2320      \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 16)         0         \n"," 2D)                                                             \n","                                                                 \n"," dropout_1 (Dropout)         (None, 5, 5, 16)          0         \n","                                                                 \n"," flatten (Flatten)           (None, 400)               0         \n","                                                                 \n"," dense (Dense)               (None, 16)                6416      \n","                                                                 \n"," dense_1 (Dense)             (None, 10)                170       \n","                                                                 \n","=================================================================\n","Total params: 9,066\n","Trainable params: 9,066\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"aoxsgSllX9UJ","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"ok","timestamp":1637773594091,"user_tz":-60,"elapsed":602,"user":{"displayName":"Oluwatosin Alabi","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"11452325336631533332"}},"outputId":"8b364aba-2e78-4fd9-9f7a-55ed9fb9ed51"},"source":["# Prepare image\n","index = 28\n","img = x_test[index]\n","img_array = np.expand_dims(img, axis=0)\n","\n","# Remove last layer's softmax\n","model.layers[-1].activation = None\n","\n","# Print what the top predicted class is\n","preds = model.predict(img_array)\n","print(\"Predicted:\", np.argmax(preds))\n","\n","# Generate class activation heatmap\n","heatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\n","\n","# # Display heatmap\n","# plt.matshow(heatmap)\n","# plt.show()\n","\n","fig = plt.figure()\n","ax1 = fig.add_subplot(1,2,1)\n","ax1.imshow(np.squeeze(img), cmap=\"gray\")\n","ax2 = fig.add_subplot(1,2,2)\n","ax2.imshow(heatmap)\n","plt.show()"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted: 0\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"EtkzmW0hX9UK"},"source":["## Create a superimposed visualization"]}]}